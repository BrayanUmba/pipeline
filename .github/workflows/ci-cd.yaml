name: CI/CD Pipeline for Node.js App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker pull brayanumba/my-app:latest

      - name: Run Docker image
        run: |
          docker run -d -p 3000:3000 brayanumba/my-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https curl conntrack socat

      - name: Install CNI plugins
        run: |
          VERSION="v1.3.0"
          curl -LO https://github.com/containernetworking/plugins/releases/download/$VERSION/cni-plugins-linux-amd64-$VERSION.tgz
          sudo mkdir -p /opt/cni/bin
          sudo tar -C /opt/cni/bin -xzf cni-plugins-linux-amd64-$VERSION.tgz
          rm cni-plugins-linux-amd64-$VERSION.tgz

      - name: Install crictl
        run: |
          VERSION="v1.31.0"
          curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
          sudo tar -C /usr/local/bin -xzf crictl-$VERSION-linux-amd64.tar.gz
          rm crictl-$VERSION-linux-amd64.tar.gz

      - name: Install cri-dockerd
        run: |
          sudo apt-get install -y golang-go
          git clone https://github.com/Mirantis/cri-dockerd.git
          cd cri-dockerd
          mkdir bin
          go build -o bin/cri-dockerd
          sudo install bin/cri-dockerd /usr/local/bin/
          cd ..
          rm -rf cri-dockerd

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=none --container-runtime=docker

      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl cluster-info

      - name: Verify Minikube
        run: |
          minikube status
          kubectl get nodes

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Configure ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd

      - name: Deploy application with kubectl
        run: |
          kubectl apply -f k8s/app.yaml
          kubectl get all -n default
